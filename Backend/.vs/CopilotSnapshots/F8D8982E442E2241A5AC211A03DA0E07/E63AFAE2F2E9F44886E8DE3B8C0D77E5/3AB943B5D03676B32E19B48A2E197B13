using Domain.Entities;
using Microsoft.EntityFrameworkCore;

namespace Infraestructure.Data
{
 public class AppDbContext : DbContext
 {
 public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

 public DbSet<Producto> Productos { get; set; }
 public DbSet<Proveedor> Proveedores { get; set; }
 public DbSet<Cliente> Clientes { get; set; }
 public DbSet<MovimientoInventario> Movimientos { get; set; }
 public DbSet<Promocion> Promociones { get; set; }
 public DbSet<PromocionProducto> PromocionProductos { get; set; }
 public DbSet<Devolucion> Devoluciones { get; set; }
 public DbSet<Venta> Ventas { get; set; }
 public DbSet<DetalleVenta> DetallesVenta { get; set; }

 protected override void OnModelCreating(ModelBuilder modelBuilder)
 {
 base.OnModelCreating(modelBuilder);
 
       // Configurar PromocionProducto con clave compuesta
 modelBuilder.Entity<PromocionProducto>()
 .HasKey(pp => new { pp.PromocionId, pp.ProductoId });

 modelBuilder.Entity<PromocionProducto>()
 .HasOne(pp => pp.Promocion)
 .WithMany(p => p.Productos)
 .HasForeignKey(pp => pp.PromocionId);

 modelBuilder.Entity<PromocionProducto>()
 .HasOne(pp => pp.Producto)
 .WithMany(p => p.Promociones)
 .HasForeignKey(pp => pp.ProductoId);
     
   // Configurar precision para decimales
            modelBuilder.Entity<Producto>()
        .Property(p => p.PrecioCompra)
         .HasPrecision(18, 2);

            modelBuilder.Entity<Producto>()
 .Property(p => p.PrecioVenta)
    .HasPrecision(18, 2);

            modelBuilder.Entity<PromocionProducto>()
              .Property(pp => pp.DescuentoPorcentaje)
        .HasPrecision(5, 2);
        
          // Configurar relación Venta-DetalleVenta
 modelBuilder.Entity<DetalleVenta>()
 .HasOne(d => d.Venta)
 .WithMany(v => v.Detalles)
 .HasForeignKey(d => d.VentaId);

 modelBuilder.Entity<DetalleVenta>()
 .HasOne(d => d.Producto)
 .WithMany()
 .HasForeignKey(d => d.ProductoId);

 modelBuilder.Entity<DetalleVenta>()
 .Property(d => d.PrecioUnitario)
 .HasPrecision(18,2);

 modelBuilder.Entity<DetalleVenta>()
 .Property(d => d.Subtotal)
 .HasPrecision(18,2);

 modelBuilder.Entity<Venta>()
 .Property(v => v.Total)
 .HasPrecision(18,2);
 }
 }
}
