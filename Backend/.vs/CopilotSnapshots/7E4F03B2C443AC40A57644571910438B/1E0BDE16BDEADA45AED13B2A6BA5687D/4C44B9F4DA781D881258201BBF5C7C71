using Aplication.DTOs;
using Aplication.UseCases.Inventario;
using Microsoft.AspNetCore.Mvc;

namespace API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class InventarioController : ControllerBase
  {
        private readonly ActualizarInventario _actualizarInventario;
        private readonly ListarMovimientosPorProducto _listarMovimientosPorProducto;
        private readonly GenerarAlertasStockMinimo _generarAlertasStockMinimo;

        public InventarioController(
        ActualizarInventario actualizarInventario,
            ListarMovimientosPorProducto listarMovimientosPorProducto,
            GenerarAlertasStockMinimo generarAlertasStockMinimo)
        {
    _actualizarInventario = actualizarInventario;
   _listarMovimientosPorProducto = listarMovimientosPorProducto;
         _generarAlertasStockMinimo = generarAlertasStockMinimo;
 }

        [HttpGet("movimientos/{productoId}")]
      public async Task<IActionResult> GetMovimientosByProducto(Guid productoId)
        {
            var movimientos = await _listarMovimientosPorProducto.EjecutarAsync(productoId);

 if (!movimientos.Any())
      return NotFound(new { mensaje = "No hay movimientos registrados para este producto." });

       return Ok(movimientos);
        }

        [HttpPost("actualizar")]
        public async Task<IActionResult> ActualizarStock([FromBody] MovimientoInventarioDTO movimientoDTO)
    {
  if (!ModelState.IsValid)
   return BadRequest(ModelState);

 await _actualizarInventario.EjecutarAsync(movimientoDTO);
          return Ok(new { mensaje = "Inventario actualizado correctamente." });
        }

      [HttpGet("alertas")]
        public async Task<IActionResult> GetAlertasStockMinimo()
        {
            var alertas = await _generarAlertasStockMinimo.EjecutarAsync();

          if (!alertas.Any())
 return Ok(new { mensaje = "No hay productos con stock bajo el mínimo." });

            return Ok(alertas);
    }
    }
}
