using Domain.Entities;
using Domain.Interfaces;
using System;
using System.Threading.Tasks;

namespace Aplication.UseCases.Clientes
{
    public class ActualizarCliente
    {
        private readonly IClienteRepositorio _clienteRepositorio;

        public ActualizarCliente(IClienteRepositorio clienteRepositorio)
        {
            _clienteRepositorio = clienteRepositorio;
        }

        public async Task EjecutarAsync(Cliente cliente)
        {
            // Validaciones de negocio
            ValidarCliente(cliente);

            if (cliente.Id == 0)
                throw new ArgumentException("El ID del cliente es obligatorio.");

            var clienteExistente = await _clienteRepositorio.ObtenerPorIdAsync(cliente.Id);
            if (clienteExistente is null)
                throw new InvalidOperationException("El cliente no existe.");

            await _clienteRepositorio.ActualizarAsync(cliente);
        }

        private void ValidarCliente(Cliente cliente)
        {
            if (cliente is null)
                throw new ArgumentNullException(nameof(cliente));

            if (string.IsNullOrWhiteSpace(cliente.Nombres))
                throw new ArgumentException("El nombre es obligatorio.");

            if (string.IsNullOrWhiteSpace(cliente.Apellidos))
                throw new ArgumentException("El apellido es obligatorio.");

            if (string.IsNullOrWhiteSpace(cliente.Documento))
                throw new ArgumentException("El documento es obligatorio.");
        }
    }
}
