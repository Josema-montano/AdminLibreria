using Domain.Entities;
using Domain.Interfaces;
using System;
using System.Threading.Tasks;

namespace Aplication.UseCases.Productos
{
    public class ActualizarProducto
    {
        private readonly IProductoRepositorio _productoRepositorio;

        public ActualizarProducto(IProductoRepositorio productoRepositorio)
  {
            _productoRepositorio = productoRepositorio;
     }

        public async Task EjecutarAsync(Producto producto)
        {
            // Validaciones de negocio
            ValidarProducto(producto);

         var productoExistente = await _productoRepositorio.ObtenerPorIdAsync(producto.Id);
   if (productoExistente is null)
     throw new ArgumentException("El producto no existe.");

   // Actualizar producto
    await _productoRepositorio.ActualizarAsync(producto);
 }

        private void ValidarProducto(Producto producto)
        {
          if (producto is null)
    throw new ArgumentNullException(nameof(producto));

   if (producto.Id == Guid.Empty)
     throw new ArgumentException("El ID del producto es obligatorio.");

    if (string.IsNullOrWhiteSpace(producto.Codigo))
     throw new ArgumentException("El código del producto es obligatorio.");

    if (string.IsNullOrWhiteSpace(producto.Nombre))
   throw new ArgumentException("El nombre del producto es obligatorio.");

       if (producto.PrecioVenta <= 0)
    throw new ArgumentException("El precio de venta debe ser mayor a cero.");

      if (producto.StockMinimo < 0)
      throw new ArgumentException("El stock mínimo no puede ser negativo.");
        }
    }
}
