using Domain.Entities;
using Domain.Interfaces;
using Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Infraestructure.Repositorios
{
 public class PromocionRepositorio : IPromocionRepositorio
 {
 private readonly AppDbContext _context;
 public PromocionRepositorio(AppDbContext context) { _context = context; }
 public async Task<IEnumerable<Promocion>> ListarAsync() => await _context.Promociones.Include(p=>p.Productos).ThenInclude(pp=>pp.Producto).AsNoTracking().ToListAsync();
 public async Task<Promocion?> ObtenerPorIdAsync(Guid id) => await _context.Promociones.Include(p=>p.Productos).ThenInclude(pp=>pp.Producto).FirstOrDefaultAsync(x=>x.Id==id);
 public async Task CrearAsync(Promocion promo) { _context.Promociones.Add(promo); await _context.SaveChangesAsync(); }
 public async Task ActualizarAsync(Promocion promo) { _context.Promociones.Update(promo); await _context.SaveChangesAsync(); }
 public async Task EliminarAsync(Guid id) { var p = await _context.Promociones.FindAsync(id); if(p!=null){ _context.Promociones.Remove(p); await _context.SaveChangesAsync(); } }
 public async Task<IEnumerable<Promocion>> ListarActivasAsync(DateTime fecha)
 => await _context.Promociones.Where(p=>p.Activa && p.FechaInicio<=fecha && p.FechaFin>=fecha)
 .Include(p=>p.Productos).ThenInclude(pp=>pp.Producto).AsNoTracking().ToListAsync();
 }
}
